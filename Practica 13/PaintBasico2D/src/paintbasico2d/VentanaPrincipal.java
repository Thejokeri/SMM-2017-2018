/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paintbasico2d;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineListener;
import javax.swing.JFileChooser;
import sm.ftm.imagen.DeutenaropiaOp;
import sm.ftm.imagen.ProtanopiaOp;
import sm.ftm.imagen.SepiaOp;
import sm.ftm.imagen.TritanopiaOp;
import sm.ftm.iu.Formas;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author thejoker
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    private VentanaInterna vi;
 
    public VentanaPrincipal() {
        initComponents();

        this.setTitle("Paint BÃ¡sico 2D");
        this.setSize(1150, 800);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        LabelStatus = new javax.swing.JLabel();
        BarraHerramientasSup = new javax.swing.JToolBar();
        ButtonNuevo = new javax.swing.JButton();
        ButtonAbrir = new javax.swing.JButton();
        ButtongGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        ToggleButtonPuntos = new javax.swing.JToggleButton();
        ToggleButtonLinea = new javax.swing.JToggleButton();
        ToggleButtonRect = new javax.swing.JToggleButton();
        ToggleButtonElipse = new javax.swing.JToggleButton();
        ToggleButtonEditar = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        ComboBoxColores = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        SpinnerGrosor = new javax.swing.JSpinner();
        ToggleButtonRelleno = new javax.swing.JToggleButton();
        ToggleButtonTrans = new javax.swing.JToggleButton();
        ToggleButtonAlisar = new javax.swing.JToggleButton();
        ButtonPlay = new javax.swing.JButton();
        ButtonStop = new javax.swing.JButton();
        ComboBoxListaReproduccion = new javax.swing.JComboBox<>();
        ButtonRecord = new javax.swing.JButton();
        jPanel = new javax.swing.JPanel();
        BarraHerramientasInf = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        SliderBrillo = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        ComboBoxFiltro = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        ButtonContraste = new javax.swing.JButton();
        ButtonIluminar = new javax.swing.JButton();
        ButtonOscurecer = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        ButtonSeno = new javax.swing.JButton();
        ButtonSepia = new javax.swing.JButton();
        ButtonDeu = new javax.swing.JButton();
        ButtonPro = new javax.swing.JButton();
        ButtonTri = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        ButtonBandas = new javax.swing.JButton();
        ComboBoxPaleta = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        SliderRotacion = new javax.swing.JSlider();
        ButtonRot90 = new javax.swing.JButton();
        ButtonRot180 = new javax.swing.JButton();
        ButtonRot270 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        ButtonAumentar = new javax.swing.JButton();
        ButtonDisminuir = new javax.swing.JButton();
        Desktop = new javax.swing.JDesktopPane();
        MenuBar = new javax.swing.JMenuBar();
        MenuArchivo = new javax.swing.JMenu();
        MenuItemAbrirAudio = new javax.swing.JMenuItem();
        MenuItemNuevo = new javax.swing.JMenuItem();
        MenuItemAbrir = new javax.swing.JMenuItem();
        MenuItemGuardar = new javax.swing.JMenuItem();
        MenuEdicion = new javax.swing.JMenu();
        CheckBoxMenuItemBarraEstado = new javax.swing.JCheckBoxMenuItem();
        CheckBoxMenuItemBarraForma = new javax.swing.JCheckBoxMenuItem();
        CheckBoxMenuItemBarraAtrib = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        MenuItemImgTam = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelStatus.setText("Barra de Estado");
        LabelStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(LabelStatus, java.awt.BorderLayout.PAGE_END);

        BarraHerramientasSup.setRollover(true);

        ButtonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        ButtonNuevo.setFocusable(false);
        ButtonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNuevoActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ButtonNuevo);

        ButtonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        ButtonAbrir.setFocusable(false);
        ButtonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAbrirActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ButtonAbrir);

        ButtongGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        ButtongGuardar.setFocusable(false);
        ButtongGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtongGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtongGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtongGuardarActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ButtongGuardar);
        BarraHerramientasSup.add(jSeparator1);

        buttonGroup1.add(ToggleButtonPuntos);
        ToggleButtonPuntos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        ToggleButtonPuntos.setSelected(true);
        ToggleButtonPuntos.setFocusable(false);
        ToggleButtonPuntos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToggleButtonPuntos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToggleButtonPuntos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButtonPuntosActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ToggleButtonPuntos);

        buttonGroup1.add(ToggleButtonLinea);
        ToggleButtonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        ToggleButtonLinea.setFocusable(false);
        ToggleButtonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToggleButtonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToggleButtonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButtonLineaActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ToggleButtonLinea);

        buttonGroup1.add(ToggleButtonRect);
        ToggleButtonRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        ToggleButtonRect.setFocusable(false);
        ToggleButtonRect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToggleButtonRect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToggleButtonRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButtonRectActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ToggleButtonRect);

        buttonGroup1.add(ToggleButtonElipse);
        ToggleButtonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        ToggleButtonElipse.setFocusable(false);
        ToggleButtonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToggleButtonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToggleButtonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButtonElipseActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ToggleButtonElipse);

        buttonGroup1.add(ToggleButtonEditar);
        ToggleButtonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        ToggleButtonEditar.setFocusable(false);
        ToggleButtonEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToggleButtonEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToggleButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButtonEditarActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ToggleButtonEditar);
        BarraHerramientasSup.add(jSeparator2);

        ComboBoxColores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Negro", "Rojo", "Azul", "Blanco", "Amarillo", "Verde" }));
        ComboBoxColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxColoresActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ComboBoxColores);
        BarraHerramientasSup.add(jSeparator3);

        SpinnerGrosor.setModel(new javax.swing.SpinnerNumberModel(1, null, null, 1));
        SpinnerGrosor.setPreferredSize(new java.awt.Dimension(50, 26));
        SpinnerGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SpinnerGrosorStateChanged(evt);
            }
        });
        BarraHerramientasSup.add(SpinnerGrosor);

        ToggleButtonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        ToggleButtonRelleno.setFocusable(false);
        ToggleButtonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToggleButtonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToggleButtonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButtonRellenoActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ToggleButtonRelleno);

        ToggleButtonTrans.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        ToggleButtonTrans.setFocusable(false);
        ToggleButtonTrans.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToggleButtonTrans.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToggleButtonTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButtonTransActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ToggleButtonTrans);

        ToggleButtonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        ToggleButtonAlisar.setFocusable(false);
        ToggleButtonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToggleButtonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToggleButtonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButtonAlisarActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ToggleButtonAlisar);

        ButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png"))); // NOI18N
        ButtonPlay.setFocusable(false);
        ButtonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPlayActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ButtonPlay);

        ButtonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop24x24.png"))); // NOI18N
        ButtonStop.setFocusable(false);
        ButtonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStopActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ButtonStop);

        BarraHerramientasSup.add(ComboBoxListaReproduccion);

        ButtonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        ButtonRecord.setFocusable(false);
        ButtonRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRecordActionPerformed(evt);
            }
        });
        BarraHerramientasSup.add(ButtonRecord);

        getContentPane().add(BarraHerramientasSup, java.awt.BorderLayout.PAGE_START);

        jPanel.setPreferredSize(new java.awt.Dimension(125, 75));
        jPanel.setLayout(new java.awt.BorderLayout());

        BarraHerramientasInf.setRollover(true);
        BarraHerramientasInf.setPreferredSize(new java.awt.Dimension(150, 100));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Brillo", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        SliderBrillo.setMaximum(255);
        SliderBrillo.setMinimum(-255);
        SliderBrillo.setValue(0);
        SliderBrillo.setPreferredSize(new java.awt.Dimension(100, 29));
        SliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderBrilloStateChanged(evt);
            }
        });
        SliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                SliderBrilloFocusLost(evt);
            }
        });
        jPanel1.add(SliderBrillo);

        BarraHerramientasInf.add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Filtro", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        ComboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplacaino" }));
        ComboBoxFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxFiltroActionPerformed(evt);
            }
        });
        jPanel2.add(ComboBoxFiltro);

        BarraHerramientasInf.add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Contraste", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        ButtonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        ButtonContraste.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonContrasteActionPerformed(evt);
            }
        });
        jPanel3.add(ButtonContraste);

        ButtonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        ButtonIluminar.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonIluminarActionPerformed(evt);
            }
        });
        jPanel3.add(ButtonIluminar);

        ButtonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        ButtonOscurecer.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOscurecerActionPerformed(evt);
            }
        });
        jPanel3.add(ButtonOscurecer);

        BarraHerramientasInf.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), " ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        ButtonSeno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        ButtonSeno.setPreferredSize(new java.awt.Dimension(44, 36));
        ButtonSeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSenoActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonSeno);

        ButtonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        ButtonSepia.setPreferredSize(new java.awt.Dimension(44, 36));
        ButtonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSepiaActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonSepia);

        ButtonDeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/daltonico.png"))); // NOI18N
        ButtonDeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeuActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonDeu);

        ButtonPro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/daltonico1.png"))); // NOI18N
        ButtonPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonProActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonPro);

        ButtonTri.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/daltonico2.png"))); // NOI18N
        ButtonTri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTriActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonTri);

        BarraHerramientasInf.add(jPanel4);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Color", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        ButtonBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        ButtonBandas.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBandasActionPerformed(evt);
            }
        });
        jPanel5.add(ButtonBandas);

        ComboBoxPaleta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sRGB", "YCC", "Grey", "YCbCr" }));
        ComboBoxPaleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxPaletaActionPerformed(evt);
            }
        });
        jPanel5.add(ComboBoxPaleta);

        BarraHerramientasInf.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "RotaciÃ³n", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        SliderRotacion.setMaximum(360);
        SliderRotacion.setValue(0);
        SliderRotacion.setPreferredSize(new java.awt.Dimension(100, 29));
        SliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderRotacionStateChanged(evt);
            }
        });
        SliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                SliderRotacionFocusLost(evt);
            }
        });
        jPanel6.add(SliderRotacion);

        ButtonRot90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        ButtonRot90.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonRot90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRot90ActionPerformed(evt);
            }
        });
        jPanel6.add(ButtonRot90);

        ButtonRot180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        ButtonRot180.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonRot180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRot180ActionPerformed(evt);
            }
        });
        jPanel6.add(ButtonRot180);

        ButtonRot270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        ButtonRot270.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonRot270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRot270ActionPerformed(evt);
            }
        });
        jPanel6.add(ButtonRot270);

        BarraHerramientasInf.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Escala", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        ButtonAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        ButtonAumentar.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAumentarActionPerformed(evt);
            }
        });
        jPanel7.add(ButtonAumentar);

        ButtonDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        ButtonDisminuir.setPreferredSize(new java.awt.Dimension(44, 29));
        ButtonDisminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDisminuirActionPerformed(evt);
            }
        });
        jPanel7.add(ButtonDisminuir);

        BarraHerramientasInf.add(jPanel7);

        jPanel.add(BarraHerramientasInf, java.awt.BorderLayout.PAGE_END);

        Desktop.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel.add(Desktop, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel, java.awt.BorderLayout.CENTER);

        MenuArchivo.setText("Archivo");

        MenuItemAbrirAudio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        MenuItemAbrirAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/openAudio24x24.png"))); // NOI18N
        MenuItemAbrirAudio.setText("Abrir Audio");
        MenuItemAbrirAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAbrirAudioActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemAbrirAudio);

        MenuItemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        MenuItemNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        MenuItemNuevo.setText("Nuevo");
        MenuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemNuevoActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemNuevo);

        MenuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        MenuItemAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        MenuItemAbrir.setText("Abrir");
        MenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAbrirActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemAbrir);

        MenuItemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        MenuItemGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        MenuItemGuardar.setText("Guardar");
        MenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemGuardarActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemGuardar);

        MenuBar.add(MenuArchivo);

        MenuEdicion.setText("Ver");

        CheckBoxMenuItemBarraEstado.setSelected(true);
        CheckBoxMenuItemBarraEstado.setText("Ver barra de estado");
        CheckBoxMenuItemBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxMenuItemBarraEstadoActionPerformed(evt);
            }
        });
        MenuEdicion.add(CheckBoxMenuItemBarraEstado);

        CheckBoxMenuItemBarraForma.setSelected(true);
        CheckBoxMenuItemBarraForma.setText("Ver barra de formas");
        CheckBoxMenuItemBarraForma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxMenuItemBarraFormaActionPerformed(evt);
            }
        });
        MenuEdicion.add(CheckBoxMenuItemBarraForma);

        CheckBoxMenuItemBarraAtrib.setSelected(true);
        CheckBoxMenuItemBarraAtrib.setText("Ver barra de atributos");
        CheckBoxMenuItemBarraAtrib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxMenuItemBarraAtribActionPerformed(evt);
            }
        });
        MenuEdicion.add(CheckBoxMenuItemBarraAtrib);

        MenuBar.add(MenuEdicion);

        jMenu1.setText("Imagen");

        MenuItemImgTam.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        MenuItemImgTam.setText("TamaÃ±o imagen");
        MenuItemImgTam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemImgTamActionPerformed(evt);
            }
        });
        jMenu1.add(MenuItemImgTam);

        MenuBar.add(jMenu1);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public VentanaInterna getSelectedInternalWindow() {
        vi = (VentanaInterna) Desktop.getSelectedFrame();
        return vi;
    }

    private void MenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna(this);
        
        if(Desktop.getSelectedFrame() != null)
            vi.setLocation(Desktop.getSelectedFrame().getLocation().x + 10, Desktop.getSelectedFrame().getLocation().y + 10);
        
        Desktop.add(vi);
        vi.setVisible(true);
        
        BufferedImage img = new BufferedImage(500, 400, BufferedImage.TYPE_INT_ARGB);
        img.createGraphics().setPaint(Color.WHITE);
        img.createGraphics().fill(new Rectangle2D.Float(0.0F, 0.0F, img.getWidth(), img.getHeight()));
        vi.getLienzo2DImagen().setImg(img);
    }//GEN-LAST:event_MenuItemNuevoActionPerformed

    private void MenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna(this);
                vi.getLienzo2DImagen().setImg(img);
                this.Desktop.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_MenuItemAbrirActionPerformed

    private void MenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemGuardarActionPerformed
        VentanaInterna vi=(VentanaInterna) Desktop.getSelectedFrame();
        
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = vi.getLienzo2DImagen().getImg(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    }
                }catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_MenuItemGuardarActionPerformed

    private void CheckBoxMenuItemBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxMenuItemBarraEstadoActionPerformed
        this.LabelStatus.setVisible(this.CheckBoxMenuItemBarraEstado.isSelected());
    }//GEN-LAST:event_CheckBoxMenuItemBarraEstadoActionPerformed

    private void CheckBoxMenuItemBarraFormaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxMenuItemBarraFormaActionPerformed
        this.BarraHerramientasSup.setVisible(this.CheckBoxMenuItemBarraForma.isSelected());
    }//GEN-LAST:event_CheckBoxMenuItemBarraFormaActionPerformed

    private void CheckBoxMenuItemBarraAtribActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxMenuItemBarraAtribActionPerformed
        this.BarraHerramientasInf.setVisible(this.CheckBoxMenuItemBarraAtrib.isSelected());
    }//GEN-LAST:event_CheckBoxMenuItemBarraAtribActionPerformed

    private void ButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna(this);
        
        if(Desktop.getSelectedFrame() != null)
            vi.setLocation(Desktop.getSelectedFrame().getLocation().x + 10, Desktop.getSelectedFrame().getLocation().y + 10);
        
        Desktop.add(vi);
        vi.setVisible(true);
        
        BufferedImage img = new BufferedImage(500, 400, BufferedImage.TYPE_INT_ARGB);
        img.createGraphics().setPaint(Color.WHITE);
        img.createGraphics().fill(new Rectangle2D.Float(0.0F, 0.0F, img.getWidth(), img.getHeight()));
        vi.getLienzo2DImagen().setImg(img);
    }//GEN-LAST:event_ButtonNuevoActionPerformed

    private void ButtonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna(this);
                vi.getLienzo2DImagen().setImg(img);
                this.Desktop.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_ButtonAbrirActionPerformed

    private void ButtongGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtongGuardarActionPerformed
        VentanaInterna vi=(VentanaInterna) Desktop.getSelectedFrame();
        
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = vi.getLienzo2DImagen().getImg(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    }
                }catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_ButtongGuardarActionPerformed

    private void ToggleButtonPuntosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButtonPuntosActionPerformed
        this.LabelStatus.setText("Puntos");
        
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setForma(Formas.Punto);
            this.getSelectedInternalWindow().getLienzo2DImagen().setEditar(false);
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ToggleButtonPuntosActionPerformed

    private void ToggleButtonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButtonLineaActionPerformed
        this.LabelStatus.setText("LÃ­nea");
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setForma(Formas.Linea);
            this.getSelectedInternalWindow().getLienzo2DImagen().setEditar(false);
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ToggleButtonLineaActionPerformed

    private void ToggleButtonRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButtonRectActionPerformed
        this.LabelStatus.setText("Rectangulo");
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setForma(Formas.Rectangulo);
            this.getSelectedInternalWindow().getLienzo2DImagen().setEditar(false);
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ToggleButtonRectActionPerformed

    private void ToggleButtonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButtonElipseActionPerformed
        this.LabelStatus.setText("Elipse");
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setForma(Formas.Elipse);
            this.getSelectedInternalWindow().getLienzo2DImagen().setEditar(false);
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ToggleButtonElipseActionPerformed

    private void ToggleButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButtonEditarActionPerformed
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setEditar(ToggleButtonEditar.isSelected());
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ToggleButtonEditarActionPerformed

    private void SpinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SpinnerGrosorStateChanged
        if(this.getSelectedInternalWindow() != null){
            int grosor = (int) this.SpinnerGrosor.getValue();
            this.getSelectedInternalWindow().getLienzo2DImagen().setStroke(grosor);
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_SpinnerGrosorStateChanged

    private void ToggleButtonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButtonRellenoActionPerformed
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setRelleno(ToggleButtonRelleno.isSelected());
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ToggleButtonRellenoActionPerformed

    private void ToggleButtonTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButtonTransActionPerformed
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setTransparencia(ToggleButtonTrans.isSelected());
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ToggleButtonTransActionPerformed

    private void ToggleButtonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButtonAlisarActionPerformed
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setAlisar(ToggleButtonAlisar.isSelected());
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ToggleButtonAlisarActionPerformed

    private void ComboBoxColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxColoresActionPerformed
        String color = (String) this.ComboBoxColores.getSelectedItem();
        Color c = null;
        
        switch(color){
            case "Negro":
                    c = Color.BLACK;
                break;
            
            case "Rojo":
                    c = Color.RED;
                break;
            
            case "Azul":
                    c = Color.BLUE;
                break;
            
            case "Blanco":
                    c = Color.WHITE;
                break;
                
            case "Amarillo":
                    c = Color.YELLOW;
                break;
             
            case "Verde":
                    c = Color.GREEN;
                break;
        }
        
        if(this.getSelectedInternalWindow() != null){
            this.getSelectedInternalWindow().getLienzo2DImagen().setColor(c);
            this.getSelectedInternalWindow().getLienzo2DImagen().repaint();
        }
    }//GEN-LAST:event_ComboBoxColoresActionPerformed

    private void MenuItemImgTamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemImgTamActionPerformed
        
    }//GEN-LAST:event_MenuItemImgTamActionPerformed

    private void SliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderBrilloFocusGained
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            ColorModel cm = vi.getLienzo2DImagen().getImg().getColorModel();
            WritableRaster raster = vi.getLienzo2DImagen().getImg().copyData(null);
            boolean alfaPre = vi.getLienzo2DImagen().getImg().isAlphaPremultiplied();
            this.imgSource =new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_SliderBrilloFocusGained

    private void SliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderBrilloFocusLost
        this.imgSource = null;
        this.SliderBrillo.setValue(0);
    }//GEN-LAST:event_SliderBrilloFocusLost

    private void SliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderBrilloStateChanged
        VentanaInterna vi = this.getSelectedInternalWindow();
        if (vi != null && this.imgSource != null){
            try{
                RescaleOp rop = new RescaleOp(1.0f, this.SliderBrillo.getValue(), null);
                BufferedImage imgDest = rop.filter(this.imgSource, null);
                    
                vi.getLienzo2DImagen().setImg(imgDest);
                vi.getLienzo2DImagen().repaint();
            } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_SliderBrilloStateChanged

    private void ComboBoxFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxFiltroActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            this.imgSource = vi.getLienzo2DImagen().getImg();
            
            if(this.imgSource != null){
                try{
                    Kernel k = KernelProducer.createKernel(this.ComboBoxFiltro.getSelectedIndex());
                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                
                    BufferedImage imgSource = cop.filter(this.imgSource, null);
                
                    vi.getLienzo2DImagen().setImg(imgSource);
                    vi.getLienzo2DImagen().repaint();
                }catch (Exception e){
                    System.err.println("Error en el filtro");
                }
            }
        }
    }//GEN-LAST:event_ComboBoxFiltroActionPerformed

    private void ButtonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonContrasteActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo2DImagen().getImg();
            
            if(imgSource != null){
                try{
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter( imgSource, imgSource);
                    vi.getLienzo2DImagen().repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonContrasteActionPerformed

    private void ButtonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonIluminarActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo2DImagen().getImg();
            
            if(imgSource != null){
                try{
                    int type = LookupTableProducer.TYPE_ROOT;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter( imgSource, imgSource);
                    vi.getLienzo2DImagen().repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonIluminarActionPerformed

    private void ButtonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOscurecerActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo2DImagen().getImg();
            
            if(imgSource != null){
                try{
                    int type = LookupTableProducer.TYPE_POWER;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter( imgSource, imgSource);
                    vi.getLienzo2DImagen().repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonOscurecerActionPerformed

    private LookupTable seno(double w){
        double K = 255.0;
         
        byte[] lt = new byte[256];
        
        w = w / K;
        
        for(int i = 0; i <= 255; i++){
            lt[i] = (byte)(K * Math.abs(Math.sin(Math.toRadians(i * w))));
        }
        
        ByteLookupTable salida = new ByteLookupTable(0, lt);
        return salida;
    }
    
    private void ButtonSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSenoActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo2DImagen().getImg();
            
            if(imgSource != null){
                try{
                    LookupTable lt = this.seno(180);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter( imgSource, imgSource);
                    vi.getLienzo2DImagen().repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonSenoActionPerformed

    private void SliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderRotacionFocusGained
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            this.imgSource = vi.getLienzo2DImagen().getImg();
        }
    }//GEN-LAST:event_SliderRotacionFocusGained

    private void SliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderRotacionFocusLost
        this.imgSource = null;
        this.SliderRotacion.setValue(0);
    }//GEN-LAST:event_SliderRotacionFocusLost

    private void SliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderRotacionStateChanged
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){         
            if(imgSource != null){
                try{
                    double r = Math.toRadians(this.SliderRotacion.getValue());
                    Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,2);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo2DImagen().setImg(imgdest);
                    vi.getLienzo2DImagen().repaint();
                }catch (Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }//GEN-LAST:event_SliderRotacionStateChanged

    private void ButtonRot90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRot90ActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        double r = Math.toRadians(90);
        
        if(vi != null){
            this.imgSource = vi.getLienzo2DImagen().getImg();
            
            if(this.imgSource != null){
                try{
                    Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo2DImagen().setImg(imgdest);
                    vi.getLienzo2DImagen().repaint();
                }catch (Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }//GEN-LAST:event_ButtonRot90ActionPerformed

    private void ButtonRot180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRot180ActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        double r = Math.toRadians(180);
        
        if(vi != null){
            this.imgSource = vi.getLienzo2DImagen().getImg();
            
            if(this.imgSource != null){
                try{
                    Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo2DImagen().setImg(imgdest);
                    vi.getLienzo2DImagen().repaint();
                }catch (Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }//GEN-LAST:event_ButtonRot180ActionPerformed

    private void ButtonRot270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRot270ActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        double r = Math.toRadians(270);
        
        if(vi != null){
            this.imgSource = vi.getLienzo2DImagen().getImg();
            
            if(this.imgSource != null){
                try{
                    Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo2DImagen().setImg(imgdest);
                    vi.getLienzo2DImagen().repaint();
                }catch (Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }//GEN-LAST:event_ButtonRot270ActionPerformed

    private void ButtonAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAumentarActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            this.imgSource = vi.getLienzo2DImagen().getImg();
            
            if(this.imgSource != null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,2);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo2DImagen().setImg(imgdest);
                    vi.getLienzo2DImagen().repaint();
                }catch (Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonAumentarActionPerformed

    private void ButtonDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDisminuirActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            this.imgSource = vi.getLienzo2DImagen().getImg();
            
            if(this.imgSource != null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,2);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo2DImagen().setImg(imgdest);
                    vi.getLienzo2DImagen().repaint();
                }catch (Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonDisminuirActionPerformed

    private BufferedImage getBanda(BufferedImage srcImagen, int iBanda){
        //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
        //Creamos el nuevo raster a partir del raster de la imagen original
        int bandList[] = {iBanda};
        WritableRaster bandRaster = (WritableRaster)srcImagen.getRaster().createWritableChild(0,0, srcImagen.getWidth(), srcImagen.getHeight(), 0, 0, bandList);
        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);
        
        return imgBanda;
    }
        
    private void ButtonBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBandasActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            this.imgSource = vi.getLienzo2DImagen().getImg();
            if(imgSource != null){
                int max = imgSource.getRaster().getNumBands();
                for(int i = 0; i < max; i++){
                    BufferedImage banda = this.getBanda(imgSource, i);
                    VentanaInterna vi1 = new VentanaInterna(this);
                    vi1.getLienzo2DImagen().setImg(banda);
                    vi1.setLocation(Desktop.getSelectedFrame().getLocation().x + 10, Desktop.getSelectedFrame().getLocation().y + 10);
        
                    Desktop.add(vi1);
                    vi1.setTitle(vi.getTitle() + " [banda " + i + "]");
                    vi1.setVisible(true);   
                }
            }
        }
    }//GEN-LAST:event_ButtonBandasActionPerformed

    private void ComboBoxPaletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxPaletaActionPerformed
        String banda = (String) this.ComboBoxPaleta.getSelectedItem();
        ColorSpace cs = null;
        
        VentanaInterna vi = this.getSelectedInternalWindow();
        BufferedImage imgSource = this.getSelectedInternalWindow().getLienzo2DImagen().getImg();
        BufferedImage imgSalida = null;
        
        if(imgSource != null && vi != null){
            switch(banda){
                case "sRGB":
                        if(!imgSource.getColorModel().getColorSpace().isCS_sRGB()){
                            cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgSalida = cop.filter(imgSource, null);
                        }
                    break;

                case "YCC":
                        if(imgSource.getColorModel().getColorSpace().isCS_sRGB()){
                            cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgSalida = cop.filter(imgSource, null);
                        }
                    break;

                case "Grey":
                        if(imgSource.getColorModel().getColorSpace().isCS_sRGB()){
                            cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgSalida = cop.filter(imgSource, null);
                        }
                    break;

            }
            
            VentanaInterna vi1 = new VentanaInterna(this);
            vi1.getLienzo2DImagen().setImg(imgSalida);
            vi1.setLocation(vi.getLocation().x + 10, vi.getLocation().y + 10);
        
            Desktop.add(vi1);
            vi1.setTitle(vi.getTitle() + "[" + banda + "]");
            vi1.setVisible(true);   
        }
    }//GEN-LAST:event_ComboBoxPaletaActionPerformed

    private void ButtonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSepiaActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo2DImagen().getImg();
            
            if(imgSource != null){
                SepiaOp op = new SepiaOp();
                op.filter(imgSource, imgSource);
                vi.getLienzo2DImagen().setImg(imgSource);
                vi.getLienzo2DImagen().repaint();
            }
        }
    }//GEN-LAST:event_ButtonSepiaActionPerformed

    private void ButtonDeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeuActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo2DImagen().getImg();
            
            if(imgSource != null){
                DeutenaropiaOp op = new DeutenaropiaOp();
                op.filter(imgSource, imgSource);
                vi.getLienzo2DImagen().setImg(imgSource);
                vi.getLienzo2DImagen().repaint();
            }
        }
    }//GEN-LAST:event_ButtonDeuActionPerformed

    private void ButtonProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonProActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo2DImagen().getImg();
            
            if(imgSource != null){
                ProtanopiaOp op = new ProtanopiaOp();
                op.filter(imgSource, imgSource);
                vi.getLienzo2DImagen().setImg(imgSource);
                vi.getLienzo2DImagen().repaint();
            }
        }
    }//GEN-LAST:event_ButtonProActionPerformed

    private void ButtonTriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTriActionPerformed
        VentanaInterna vi = this.getSelectedInternalWindow();
        
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo2DImagen().getImg();
            
            if(imgSource != null){
                TritanopiaOp op = new TritanopiaOp();
                op.filter(imgSource, imgSource);
                vi.getLienzo2DImagen().setImg(imgSource);
                vi.getLienzo2DImagen().repaint();
            }
        }
    }//GEN-LAST:event_ButtonTriActionPerformed

    private void MenuItemAbrirAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAbrirAudioActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {
                        return this.getName();
                    }
                };
                this.ComboBoxListaReproduccion.addItem(f);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_MenuItemAbrirAudioActionPerformed

    private void ButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPlayActionPerformed
        File f = (File)this.ComboBoxListaReproduccion.getSelectedItem();
        
        if(f!=null){
            player = new SMClipPlayer(f);
            if (player != null) {
                player.play();
            }
        }
    }//GEN-LAST:event_ButtonPlayActionPerformed

    private void ButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopActionPerformed
        if(player != null){
            player.stop();
        }else{
            recorder.stop();
        }
    }//GEN-LAST:event_ButtonStopActionPerformed

    private void ButtonRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRecordActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {
                        return this.getName();
                    }
                };
                recorder = new SMSoundRecorder(f);
                if (recorder != null) {
                    recorder.record();
                    this.ComboBoxListaReproduccion.addItem(f);
                }
            } catch (Exception ex) {
                System.err.println("Error al guardar el audio");
            }
        }
    }//GEN-LAST:event_ButtonRecordActionPerformed
    /*
    class ManejadorAudio implements LineListener {
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
            }
            if (event.getType() == LineEvent.Type.STOP) {
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    }*/
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BarraHerramientasInf;
    private javax.swing.JToolBar BarraHerramientasSup;
    private javax.swing.JButton ButtonAbrir;
    private javax.swing.JButton ButtonAumentar;
    private javax.swing.JButton ButtonBandas;
    private javax.swing.JButton ButtonContraste;
    private javax.swing.JButton ButtonDeu;
    private javax.swing.JButton ButtonDisminuir;
    private javax.swing.JButton ButtonIluminar;
    private javax.swing.JButton ButtonNuevo;
    private javax.swing.JButton ButtonOscurecer;
    private javax.swing.JButton ButtonPlay;
    private javax.swing.JButton ButtonPro;
    private javax.swing.JButton ButtonRecord;
    private javax.swing.JButton ButtonRot180;
    private javax.swing.JButton ButtonRot270;
    private javax.swing.JButton ButtonRot90;
    private javax.swing.JButton ButtonSeno;
    private javax.swing.JButton ButtonSepia;
    private javax.swing.JButton ButtonStop;
    private javax.swing.JButton ButtonTri;
    private javax.swing.JButton ButtongGuardar;
    private javax.swing.JCheckBoxMenuItem CheckBoxMenuItemBarraAtrib;
    private javax.swing.JCheckBoxMenuItem CheckBoxMenuItemBarraEstado;
    private javax.swing.JCheckBoxMenuItem CheckBoxMenuItemBarraForma;
    protected javax.swing.JComboBox<String> ComboBoxColores;
    private javax.swing.JComboBox<String> ComboBoxFiltro;
    private javax.swing.JComboBox<File> ComboBoxListaReproduccion;
    private javax.swing.JComboBox<String> ComboBoxPaleta;
    private javax.swing.JDesktopPane Desktop;
    protected javax.swing.JLabel LabelStatus;
    private javax.swing.JMenu MenuArchivo;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu MenuEdicion;
    private javax.swing.JMenuItem MenuItemAbrir;
    private javax.swing.JMenuItem MenuItemAbrirAudio;
    private javax.swing.JMenuItem MenuItemGuardar;
    private javax.swing.JMenuItem MenuItemImgTam;
    private javax.swing.JMenuItem MenuItemNuevo;
    private javax.swing.JSlider SliderBrillo;
    private javax.swing.JSlider SliderRotacion;
    protected javax.swing.JSpinner SpinnerGrosor;
    protected javax.swing.JToggleButton ToggleButtonAlisar;
    protected javax.swing.JToggleButton ToggleButtonEditar;
    protected javax.swing.JToggleButton ToggleButtonElipse;
    protected javax.swing.JToggleButton ToggleButtonLinea;
    protected javax.swing.JToggleButton ToggleButtonPuntos;
    protected javax.swing.JToggleButton ToggleButtonRect;
    protected javax.swing.JToggleButton ToggleButtonRelleno;
    protected javax.swing.JToggleButton ToggleButtonTrans;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    // End of variables declaration//GEN-END:variables
    private BufferedImage imgSource = null;
    private SMPlayer player = null;
    SMRecorder recorder = null;
}
